[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "To figure out the steps to processing data, we process the first input outside a function to ensure it is working correctly. Generally speaking, we read in the CSV file, selected the specified columns, pivoted to a longer form, and extracted the relevent value for year from the variable codes.\n\ndata_raw &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\ndata_clean &lt;- data_raw |&gt;\n  select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n  rename(area_name = Area_name) |&gt;\n  arrange(area_name) |&gt; \n  pivot_longer(cols = ends_with(\"D\"), \n               names_to = \"varcode\", \n               values_to = \"vals\") |&gt;\n  mutate(year = ifelse(as.numeric(substr(varcode,8,9))&gt;25,as.numeric(substr(varcode,8,9))+1900,as.numeric(substr(varcode,8,9))+2000),measure=substr(varcode,1,7))\n\nWe then split the data into a separate tibble for state-level data and county-level data, filtering out the duplicate values for DC. In the state-level data, we also add a variable indicating each states “division” as designated by the United Stated Census Bureau. This results in the two tibbles output below.\n\ncountydata &lt;- data_clean |&gt;\n  slice(grep(pattern = \", \\\\w\\\\w\", area_name))|&gt;\n  mutate(state = substr(area_name,nchar(area_name)-1,nchar(area_name)))\nclass(countydata) &lt;- c(\"county\", class(countydata))\n\nstatedata &lt;- data_clean |&gt;\n  slice(grep(pattern = \", \\\\w\\\\w\", area_name,invert=TRUE)) |&gt;\n  mutate(division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"),\"1\",\n                    ifelse(area_name %in% c(\"NEW JERSEY\",\"NEW YORK\",\"PENNSYLVANIA\"),\"2\",\n                    ifelse(area_name %in% c(\"ILLINOIS\",\"INDIANA\",\"MICHIGAN\",\"OHIO\",\"WISCONSIN\"),\"3\",\n                    ifelse(area_name %in% c(\"IOWA\",\"KANSAS\",\"MINNESOTA\",\"MISSOURI\",\"NEBRASKA\",\"NORTH DAKOTA\",\"SOUTH DAKOTA\"),\"4\",\n                    ifelse(area_name %in% c(\"DELAWARE\",\"FLORIDA\",\"GEORGIA\",\"MARYLAND\",\"NORTH CAROLINA\",\"SOUTH CAROLINA\",\"VIRGINIA\",\"DISTRICT OF COLUMBIA\",\"WEST VIRGINIA\"),\"5\",\n                    ifelse(area_name %in% c(\"ALABAMA\",\"KENTUCKY\",\"MISSISSIPPI\",\"TENNESSEE\"),\"6\",\n                    ifelse(area_name %in% c(\"ARKANSAS\",\"LOUISIANA\",\"OKLAHOMA\",\"TEXAS\"),\"7\",\n                    ifelse(area_name %in% c(\"ARIZONA\",\"COLORADO\",\"IDAHO\",\"MONTANA\",\"NEVADA\",\"NEW MEXICO\",\"UTAH\",\"WYOMING\"),\"8\",\n                    ifelse(area_name %in% c(\"ALASKA\",\"CALIFORNIA\",\"HAWAII\",\"OREGON\",\"WASHINGTON\"),\"9\",\"ERROR\"\n                    ))))))))))      \n\nclass(statedata) &lt;- c(\"state\", class(statedata))\ncountydata\n\n# A tibble: 31,450 × 7\n   area_name     STCOU varcode     vals  year measure state\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n 1 Abbeville, SC 45001 EDU010187D  3941  1987 EDU0101 SC   \n 2 Abbeville, SC 45001 EDU010188D  3934  1988 EDU0101 SC   \n 3 Abbeville, SC 45001 EDU010189D  3880  1989 EDU0101 SC   \n 4 Abbeville, SC 45001 EDU010190D  3834  1990 EDU0101 SC   \n 5 Abbeville, SC 45001 EDU010191D  3806  1991 EDU0101 SC   \n 6 Abbeville, SC 45001 EDU010192D  3780  1992 EDU0101 SC   \n 7 Abbeville, SC 45001 EDU010193D  3804  1993 EDU0101 SC   \n 8 Abbeville, SC 45001 EDU010194D  3750  1994 EDU0101 SC   \n 9 Abbeville, SC 45001 EDU010195D  3780  1995 EDU0101 SC   \n10 Abbeville, SC 45001 EDU010196D  3803  1996 EDU0101 SC   \n# ℹ 31,440 more rows\n\nstatedata\n\n# A tibble: 530 × 7\n   area_name STCOU varcode      vals  year measure division\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   \n 1 ALABAMA   01000 EDU010187D 733735  1987 EDU0101 6       \n 2 ALABAMA   01000 EDU010188D 728234  1988 EDU0101 6       \n 3 ALABAMA   01000 EDU010189D 730048  1989 EDU0101 6       \n 4 ALABAMA   01000 EDU010190D 728252  1990 EDU0101 6       \n 5 ALABAMA   01000 EDU010191D 725541  1991 EDU0101 6       \n 6 ALABAMA   01000 EDU010192D 726150  1992 EDU0101 6       \n 7 ALABAMA   01000 EDU010193D 728014  1993 EDU0101 6       \n 8 ALABAMA   01000 EDU010194D 730509  1994 EDU0101 6       \n 9 ALABAMA   01000 EDU010195D 727989  1995 EDU0101 6       \n10 ALABAMA   01000 EDU010196D 736825  1996 EDU0101 6       \n# ℹ 520 more rows\n\n\n\n\n\nNow that we know the basic steps, we convert the process into 3 functions below for ease of reproducability across multiple input data files.\n\nfunction_for_step_1_2 &lt;- function(result, value){\n  longer_data &lt;- result |&gt;\n    select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n    rename(area_name = Area_name) |&gt;\n    arrange(area_name) |&gt; \n    pivot_longer(cols = ends_with(\"D\"), \n                 names_to = \"varcode\", \n                 values_to = value) \n  return(longer_data)\n}\nfunction_for_step_3 &lt;- function(longer_data){\n  create_date_columns &lt;- longer_data |&gt;\n      mutate(year =\n               ifelse(as.numeric(substr(varcode,8,9))&gt;25,\n                      as.numeric(substr(varcode,8,9))+1900,\n                      as.numeric(substr(varcode,8,9))+2000),\n             measure=substr(varcode,1,7))\n  return(create_date_columns)\n}\nfunction_for_steps4_5_6 &lt;- function(create_date_columns){\n  countydata &lt;- create_date_columns |&gt;\n    slice(grep(pattern = \", \\\\w\\\\w\", area_name))|&gt;\n    mutate(state =\n             substr(area_name,nchar(area_name)-1,nchar(area_name)))\n  class(countydata) &lt;- c(\"county\", class(countydata))\n\n  statedata &lt;- create_date_columns |&gt;\n    slice(grep(pattern = \", \\\\w\\\\w\", area_name,invert=TRUE)) |&gt;\n    ###Filtering out duplicate DC values###\n    filter(area_name != \"District of Columbia\") |&gt;\n    mutate(division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"),\"1\",\n                      ifelse(area_name %in% c(\"NEW JERSEY\",\"NEW YORK\",\"PENNSYLVANIA\"),\"2\",\n                      ifelse(area_name %in% c(\"ILLINOIS\",\"INDIANA\",\"MICHIGAN\",\"OHIO\",\"WISCONSIN\"),\"3\",\n                      ifelse(area_name %in% c(\"IOWA\",\"KANSAS\",\"MINNESOTA\",\"MISSOURI\",\"NEBRASKA\",\"NORTH DAKOTA\",\"SOUTH DAKOTA\"),\"4\",\n                      ifelse(area_name %in% c(\"DELAWARE\",\"FLORIDA\",\"GEORGIA\",\"MARYLAND\",\"NORTH CAROLINA\",\"SOUTH CAROLINA\",\"VIRGINIA\",\n                                              \"DISTRICT OF COLUMBIA\",\"WEST VIRGINIA\"),\"5\",\n                      ifelse(area_name %in% c(\"ALABAMA\",\"KENTUCKY\",\"MISSISSIPPI\",\"TENNESSEE\"),\"6\",\n                      ifelse(area_name %in% c(\"ARKANSAS\",\"LOUISIANA\",\"OKLAHOMA\",\"TEXAS\"),\"7\",\n                      ifelse(area_name %in% c(\"ARIZONA\",\"COLORADO\",\"IDAHO\",\"MONTANA\",\"NEVADA\",\"NEW MEXICO\",\"UTAH\",\"WYOMING\"),\"8\",\n                      ifelse(area_name %in% c(\"ALASKA\",\"CALIFORNIA\",\"HAWAII\",\"OREGON\",\"WASHINGTON\"),\"9\",\"ERROR\"))))))))))\n  class(statedata) &lt;- c(\"state\", class(statedata))\n  return(list(countydata, statedata))\n}\n\nWe then create a wrapper function to automate the process, so we can now simply add a CSV file name/path, and optionally a specific value we would like if enrollment is no longer the measure of interest, to the function my_wrapper().\n\nmy_wrapper &lt;- function(url, value = \"enrollment\"){\n  # assume URL is in quotes\n  result &lt;- read_csv(url) |&gt;\n    function_for_step_1_2(value) |&gt;\n    function_for_step_3() |&gt;\n    function_for_steps4_5_6()\n}\nresult_tibbles &lt;- my_wrapper(url=\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\ncountyData_Final &lt;- result_tibbles[[1]]\nstateData_Final &lt;- result_tibbles[[2]]\n\nWe additionally create a function to combine the processing results from multiple CSV files into one larger tibble.\n\ncombine_datasets &lt;- function(results1, results2){\n  combined_county &lt;- dplyr::bind_rows(results1[[1]],results2[[1]])\n  combined_state &lt;- dplyr::bind_rows(results1[[2]],results2[[2]])\n  return(list(countyData = combined_county, stateData = combined_state))\n}"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "To figure out the steps to processing data, we process the first input outside a function to ensure it is working correctly. Generally speaking, we read in the CSV file, selected the specified columns, pivoted to a longer form, and extracted the relevent value for year from the variable codes.\n\ndata_raw &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\ndata_clean &lt;- data_raw |&gt;\n  select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n  rename(area_name = Area_name) |&gt;\n  arrange(area_name) |&gt; \n  pivot_longer(cols = ends_with(\"D\"), \n               names_to = \"varcode\", \n               values_to = \"vals\") |&gt;\n  mutate(year = ifelse(as.numeric(substr(varcode,8,9))&gt;25,as.numeric(substr(varcode,8,9))+1900,as.numeric(substr(varcode,8,9))+2000),measure=substr(varcode,1,7))\n\nWe then split the data into a separate tibble for state-level data and county-level data, filtering out the duplicate values for DC. In the state-level data, we also add a variable indicating each states “division” as designated by the United Stated Census Bureau. This results in the two tibbles output below.\n\ncountydata &lt;- data_clean |&gt;\n  slice(grep(pattern = \", \\\\w\\\\w\", area_name))|&gt;\n  mutate(state = substr(area_name,nchar(area_name)-1,nchar(area_name)))\nclass(countydata) &lt;- c(\"county\", class(countydata))\n\nstatedata &lt;- data_clean |&gt;\n  slice(grep(pattern = \", \\\\w\\\\w\", area_name,invert=TRUE)) |&gt;\n  mutate(division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"),\"1\",\n                    ifelse(area_name %in% c(\"NEW JERSEY\",\"NEW YORK\",\"PENNSYLVANIA\"),\"2\",\n                    ifelse(area_name %in% c(\"ILLINOIS\",\"INDIANA\",\"MICHIGAN\",\"OHIO\",\"WISCONSIN\"),\"3\",\n                    ifelse(area_name %in% c(\"IOWA\",\"KANSAS\",\"MINNESOTA\",\"MISSOURI\",\"NEBRASKA\",\"NORTH DAKOTA\",\"SOUTH DAKOTA\"),\"4\",\n                    ifelse(area_name %in% c(\"DELAWARE\",\"FLORIDA\",\"GEORGIA\",\"MARYLAND\",\"NORTH CAROLINA\",\"SOUTH CAROLINA\",\"VIRGINIA\",\"DISTRICT OF COLUMBIA\",\"WEST VIRGINIA\"),\"5\",\n                    ifelse(area_name %in% c(\"ALABAMA\",\"KENTUCKY\",\"MISSISSIPPI\",\"TENNESSEE\"),\"6\",\n                    ifelse(area_name %in% c(\"ARKANSAS\",\"LOUISIANA\",\"OKLAHOMA\",\"TEXAS\"),\"7\",\n                    ifelse(area_name %in% c(\"ARIZONA\",\"COLORADO\",\"IDAHO\",\"MONTANA\",\"NEVADA\",\"NEW MEXICO\",\"UTAH\",\"WYOMING\"),\"8\",\n                    ifelse(area_name %in% c(\"ALASKA\",\"CALIFORNIA\",\"HAWAII\",\"OREGON\",\"WASHINGTON\"),\"9\",\"ERROR\"\n                    ))))))))))      \n\nclass(statedata) &lt;- c(\"state\", class(statedata))\ncountydata\n\n# A tibble: 31,450 × 7\n   area_name     STCOU varcode     vals  year measure state\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;\n 1 Abbeville, SC 45001 EDU010187D  3941  1987 EDU0101 SC   \n 2 Abbeville, SC 45001 EDU010188D  3934  1988 EDU0101 SC   \n 3 Abbeville, SC 45001 EDU010189D  3880  1989 EDU0101 SC   \n 4 Abbeville, SC 45001 EDU010190D  3834  1990 EDU0101 SC   \n 5 Abbeville, SC 45001 EDU010191D  3806  1991 EDU0101 SC   \n 6 Abbeville, SC 45001 EDU010192D  3780  1992 EDU0101 SC   \n 7 Abbeville, SC 45001 EDU010193D  3804  1993 EDU0101 SC   \n 8 Abbeville, SC 45001 EDU010194D  3750  1994 EDU0101 SC   \n 9 Abbeville, SC 45001 EDU010195D  3780  1995 EDU0101 SC   \n10 Abbeville, SC 45001 EDU010196D  3803  1996 EDU0101 SC   \n# ℹ 31,440 more rows\n\nstatedata\n\n# A tibble: 530 × 7\n   area_name STCOU varcode      vals  year measure division\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;   \n 1 ALABAMA   01000 EDU010187D 733735  1987 EDU0101 6       \n 2 ALABAMA   01000 EDU010188D 728234  1988 EDU0101 6       \n 3 ALABAMA   01000 EDU010189D 730048  1989 EDU0101 6       \n 4 ALABAMA   01000 EDU010190D 728252  1990 EDU0101 6       \n 5 ALABAMA   01000 EDU010191D 725541  1991 EDU0101 6       \n 6 ALABAMA   01000 EDU010192D 726150  1992 EDU0101 6       \n 7 ALABAMA   01000 EDU010193D 728014  1993 EDU0101 6       \n 8 ALABAMA   01000 EDU010194D 730509  1994 EDU0101 6       \n 9 ALABAMA   01000 EDU010195D 727989  1995 EDU0101 6       \n10 ALABAMA   01000 EDU010196D 736825  1996 EDU0101 6       \n# ℹ 520 more rows\n\n\n\n\n\nNow that we know the basic steps, we convert the process into 3 functions below for ease of reproducability across multiple input data files.\n\nfunction_for_step_1_2 &lt;- function(result, value){\n  longer_data &lt;- result |&gt;\n    select(Area_name,STCOU,ends_with(\"D\")) |&gt;\n    rename(area_name = Area_name) |&gt;\n    arrange(area_name) |&gt; \n    pivot_longer(cols = ends_with(\"D\"), \n                 names_to = \"varcode\", \n                 values_to = value) \n  return(longer_data)\n}\nfunction_for_step_3 &lt;- function(longer_data){\n  create_date_columns &lt;- longer_data |&gt;\n      mutate(year =\n               ifelse(as.numeric(substr(varcode,8,9))&gt;25,\n                      as.numeric(substr(varcode,8,9))+1900,\n                      as.numeric(substr(varcode,8,9))+2000),\n             measure=substr(varcode,1,7))\n  return(create_date_columns)\n}\nfunction_for_steps4_5_6 &lt;- function(create_date_columns){\n  countydata &lt;- create_date_columns |&gt;\n    slice(grep(pattern = \", \\\\w\\\\w\", area_name))|&gt;\n    mutate(state =\n             substr(area_name,nchar(area_name)-1,nchar(area_name)))\n  class(countydata) &lt;- c(\"county\", class(countydata))\n\n  statedata &lt;- create_date_columns |&gt;\n    slice(grep(pattern = \", \\\\w\\\\w\", area_name,invert=TRUE)) |&gt;\n    ###Filtering out duplicate DC values###\n    filter(area_name != \"District of Columbia\") |&gt;\n    mutate(division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"),\"1\",\n                      ifelse(area_name %in% c(\"NEW JERSEY\",\"NEW YORK\",\"PENNSYLVANIA\"),\"2\",\n                      ifelse(area_name %in% c(\"ILLINOIS\",\"INDIANA\",\"MICHIGAN\",\"OHIO\",\"WISCONSIN\"),\"3\",\n                      ifelse(area_name %in% c(\"IOWA\",\"KANSAS\",\"MINNESOTA\",\"MISSOURI\",\"NEBRASKA\",\"NORTH DAKOTA\",\"SOUTH DAKOTA\"),\"4\",\n                      ifelse(area_name %in% c(\"DELAWARE\",\"FLORIDA\",\"GEORGIA\",\"MARYLAND\",\"NORTH CAROLINA\",\"SOUTH CAROLINA\",\"VIRGINIA\",\n                                              \"DISTRICT OF COLUMBIA\",\"WEST VIRGINIA\"),\"5\",\n                      ifelse(area_name %in% c(\"ALABAMA\",\"KENTUCKY\",\"MISSISSIPPI\",\"TENNESSEE\"),\"6\",\n                      ifelse(area_name %in% c(\"ARKANSAS\",\"LOUISIANA\",\"OKLAHOMA\",\"TEXAS\"),\"7\",\n                      ifelse(area_name %in% c(\"ARIZONA\",\"COLORADO\",\"IDAHO\",\"MONTANA\",\"NEVADA\",\"NEW MEXICO\",\"UTAH\",\"WYOMING\"),\"8\",\n                      ifelse(area_name %in% c(\"ALASKA\",\"CALIFORNIA\",\"HAWAII\",\"OREGON\",\"WASHINGTON\"),\"9\",\"ERROR\"))))))))))\n  class(statedata) &lt;- c(\"state\", class(statedata))\n  return(list(countydata, statedata))\n}\n\nWe then create a wrapper function to automate the process, so we can now simply add a CSV file name/path, and optionally a specific value we would like if enrollment is no longer the measure of interest, to the function my_wrapper().\n\nmy_wrapper &lt;- function(url, value = \"enrollment\"){\n  # assume URL is in quotes\n  result &lt;- read_csv(url) |&gt;\n    function_for_step_1_2(value) |&gt;\n    function_for_step_3() |&gt;\n    function_for_steps4_5_6()\n}\nresult_tibbles &lt;- my_wrapper(url=\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\ncountyData_Final &lt;- result_tibbles[[1]]\nstateData_Final &lt;- result_tibbles[[2]]\n\nWe additionally create a function to combine the processing results from multiple CSV files into one larger tibble.\n\ncombine_datasets &lt;- function(results1, results2){\n  combined_county &lt;- dplyr::bind_rows(results1[[1]],results2[[1]])\n  combined_state &lt;- dplyr::bind_rows(results1[[2]],results2[[2]])\n  return(list(countyData = combined_county, stateData = combined_state))\n}"
  },
  {
    "objectID": "Project1.html#data-summarization",
    "href": "Project1.html#data-summarization",
    "title": "ST 558 Project 1",
    "section": "Data Summarization",
    "text": "Data Summarization\nWe then turn our attention to a method for automatically summarizing the datasets created from our previous functions, specifically plotting the state-level data as a line chart for average enrollment by year, with different lines for each division, and the county-level data as a line chart for simple enrollment by year across counties, specifying a particular state and considering either the top n number of counties or the bottom n number of counties, where ordering is according to average enrollment across the entire time period.\n\nplot.state &lt;- function(df,var_name=\"enrollment\"){\n  mean_data &lt;- df |&gt;\n    filter(division != \"ERROR\") |&gt;\n    group_by(division,year) |&gt;\n    summarize(var_avg = mean(get(var_name)))\n  g &lt;- ggplot(mean_data,aes(x=year,y=var_avg,color=division))\n  g+geom_line()+labs(y=paste(\"average\",var_name))\n}\n\nplot.county &lt;- function(df,state_choice=\"NC\",top_bottom=\"top\",n_given=5,var_name=\"enrollment\"){\n  mean_data &lt;- df |&gt;\n    filter(state == state_choice) |&gt;\n    group_by(area_name) |&gt;\n    summarize(var_avg = mean(get(var_name))) \n    ifelse(tolower(top_bottom)==\"top\", mean_data &lt;- mean_data |&gt; arrange(desc(var_avg)),\n           ifelse(tolower(top_bottom)==\"bottom\",\n              mean_data &lt;- mean_data |&gt;\n              arrange(var_avg),\n            return(\"ERROR, please specify 'top' or 'bottom'\")))\n    \n  mean_data &lt;- mean_data |&gt; slice(1:n_given)\n  plot_data &lt;- left_join(mean_data,df, by = \"area_name\")\n  ###Prompt seemed a little unclear, but I think for the county data we are supposed to be plotting the actual data values for enrollment per year, with different lines for the top/bottom n specified counties? That should be completed here. - TB\n  g &lt;- ggplot(plot_data,aes(x=year,y=get(var_name),color=area_name))\n  g+geom_line()+labs(y=var_name)\n}"
  }
]